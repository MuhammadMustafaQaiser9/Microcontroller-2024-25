// Pin Definitions
const int redD1Pin = 2;
const int yellowD1Pin = 3;
const int greenD1Pin = 4;

const int redD2Pin = 5;
const int yellowD2Pin = 6;
const int greenD2Pin = 7;

const int redD3Pin = 11;
const int yellowD3Pin = 12;
const int greenD3Pin = 13;

const int redPedPin = 8;
const int greenPedPin = 9;

const int buttonPin = 10;  // Pedestrian button

// Timing Constants (in milliseconds)
const unsigned long redDuration = 2000;
const unsigned long yellowDuration = 5000;
const unsigned long greenDuration = 10000;
const unsigned long pedestrianDuration = 5000;

// Traffic light states
enum class SignalState {
    D1D2_GREEN,
    D3_GREEN,
    D1D2_YELLOW,
    PEDESTRIAN_SIGNAL
};

// Handles pedestrian button press
class PedestrianRequestHandler {
private:
    bool request = false; // Track if pedestrian request is active

public:
    void checkButtonPress() {
        if (digitalRead(buttonPin) == LOW) {
            request = true;
        }
    }

    bool isRequested() const { return request; }

    void resetRequest() { request = false; }
};

// Manages the LEDs
class TrafficLightController {
public:
    void initializePins() {
        pinMode(redD1Pin, OUTPUT);
        pinMode(yellowD1Pin, OUTPUT);
        pinMode(greenD1Pin, OUTPUT);

        pinMode(redD2Pin, OUTPUT);
        pinMode(yellowD2Pin, OUTPUT);
        pinMode(greenD2Pin, OUTPUT);

        pinMode(redD3Pin, OUTPUT);
        pinMode(yellowD3Pin, OUTPUT);
        pinMode(greenD3Pin, OUTPUT);

        pinMode(redPedPin, OUTPUT);
        pinMode(greenPedPin, OUTPUT);

        pinMode(buttonPin, INPUT_PULLUP); // Enable internal pull-up for button
    }

    void setSignalState(SignalState state) {
        // Turn off all lights
        digitalWrite(redD1Pin, LOW);
        digitalWrite(yellowD1Pin, LOW);
        digitalWrite(greenD1Pin, LOW);

        digitalWrite(redD2Pin, LOW);
        digitalWrite(yellowD2Pin, LOW);
        digitalWrite(greenD2Pin, LOW);

        digitalWrite(redD3Pin, LOW);
        digitalWrite(yellowD3Pin, LOW);
        digitalWrite(greenD3Pin, LOW);

        digitalWrite(redPedPin, LOW);
        digitalWrite(greenPedPin, LOW);

        // Activate appropriate lights based on the state
        switch (state) {
            case SignalState::D1D2_GREEN:
                digitalWrite(greenD1Pin, HIGH);
                digitalWrite(greenD2Pin, HIGH);
                digitalWrite(redD3Pin, HIGH);
                digitalWrite(redPedPin, HIGH);
                break;
            case SignalState::D3_GREEN:
                digitalWrite(redD1Pin, HIGH);
                digitalWrite(redD2Pin, HIGH); // Ensure D2 is red
                digitalWrite(greenD3Pin, HIGH);
                digitalWrite(redPedPin, HIGH);
                break;
            case SignalState::D1D2_YELLOW:
                digitalWrite(yellowD1Pin, HIGH);
                digitalWrite(yellowD2Pin, HIGH);
                digitalWrite(redD3Pin, HIGH);
                digitalWrite(redPedPin, HIGH);
                break;
            case SignalState::PEDESTRIAN_SIGNAL:
                digitalWrite(redD1Pin, HIGH);
                digitalWrite(redD2Pin, HIGH);
                digitalWrite(redD3Pin, HIGH);
                digitalWrite(greenPedPin, HIGH);
                break;
        }
    }

    void transitionToRed() {
        // Turn all traffic lights to yellow, then red
        digitalWrite(greenD1Pin, LOW);
        digitalWrite(greenD2Pin, LOW);
        digitalWrite(greenD3Pin, LOW);

        digitalWrite(yellowD1Pin, HIGH);
        digitalWrite(yellowD2Pin, HIGH);
        digitalWrite(yellowD3Pin, HIGH);
        delay(yellowDuration);

        digitalWrite(yellowD1Pin, LOW);
        digitalWrite(yellowD2Pin, LOW);
        digitalWrite(yellowD3Pin, LOW);

        digitalWrite(redD1Pin, HIGH);
        digitalWrite(redD2Pin, HIGH);
        digitalWrite(redD3Pin, HIGH);
    }
};

// State machine and timing logic
class TrafficLightSystem {
private:
    SignalState currentState = SignalState::D1D2_GREEN;  // Initial state
    unsigned long lastStateChangeTime = 0;              // Time of last state change
    PedestrianRequestHandler pedestrianRequestHandler;
    TrafficLightController lightController;

public:
    void setup() {
        lightController.initializePins();
        lightController.setSignalState(SignalState::D1D2_GREEN);
        lastStateChangeTime = millis();
    }

    void update() {
        unsigned long currentTime = millis();

        pedestrianRequestHandler.checkButtonPress();

        if (pedestrianRequestHandler.isRequested() && currentState != SignalState::PEDESTRIAN_SIGNAL) {
            handlePedestrianRequest();
            return;
        }

        switch (currentState) {
            case SignalState::D1D2_GREEN:
                if (currentTime - lastStateChangeTime >= greenDuration) {
                    changeState(SignalState::D1D2_YELLOW);
                }
                break;

            case SignalState::D1D2_YELLOW:
                if (currentTime - lastStateChangeTime >= yellowDuration) {
                    changeState(SignalState::D3_GREEN);
                }
                break;

            case SignalState::D3_GREEN:
                if (currentTime - lastStateChangeTime >= greenDuration) {
                    changeState(SignalState::D1D2_GREEN);
                }
                break;

            case SignalState::PEDESTRIAN_SIGNAL:
                if (currentTime - lastStateChangeTime >= pedestrianDuration) {
                    pedestrianRequestHandler.resetRequest();
                    changeState(SignalState::D1D2_GREEN);
                }
                break;
        }
    }

private:
    void handlePedestrianRequest() {
        lightController.transitionToRed();  // Turn all traffic lights to yellow, then red
        lightController.setSignalState(SignalState::PEDESTRIAN_SIGNAL);  // Activate pedestrian green light
        lastStateChangeTime = millis();
        currentState = SignalState::PEDESTRIAN_SIGNAL;
    }

    void changeState(SignalState newState) {
        currentState = newState;
        lightController.setSignalState(newState);
        lastStateChangeTime = millis();
    }
};

TrafficLightSystem trafficLightSystem;

void setup() {
    trafficLightSystem.setup();
}

void loop() {
    trafficLightSystem.update();
}

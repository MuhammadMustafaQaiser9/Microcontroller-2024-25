// Assigning pins
const int TRAFFIC_LIGHT_PINS[] = {2, 3, 4};   // Traffic light 1: Red, Yellow, Green
const int TRAFFIC_LIGHT2_PINS[] = {5, 6, 7};  // Traffic light 2: Red, Yellow, Green
const int PEDESTRIAN_LIGHT_PINS[] = {8, 9};   // Pedestrian lights: Red and Green
const int PEDESTRIAN_BUTTON = 10;             // Pedestrian button pin

// Time durations (in milliseconds)
const unsigned long RED_LIGHT_TIME = 2000;    // 2 seconds
const unsigned long YELLOW_LIGHT_TIME = 1000; // 1 second
const unsigned long GREEN_LIGHT_TIME = 4000;  // 4 seconds

// Traffic light states
enum class SignalState {
    RED_SIGNAL,
    YELLOW_SIGNAL,
    GREEN_SIGNAL,
    PEDESTRIAN_SIGNAL
};

// Handles pedestrian button press
class PedestrianRequestHandler {
private:
    bool request = false; // Track if pedestrian request is active

public:
    void checkButtonPress() {
        if (digitalRead(PEDESTRIAN_BUTTON) == LOW) {
            request = true;
        }
    }

    bool isRequested() const { return request; }

    void resetRequest() { request = false; }
};

// Manages the LEDs
class TrafficLightController {
public:
    void initializePins() {
        for (int pin : TRAFFIC_LIGHT_PINS) pinMode(pin, OUTPUT);
        for (int pin : TRAFFIC_LIGHT2_PINS) pinMode(pin, OUTPUT);
        for (int pin : PEDESTRIAN_LIGHT_PINS) pinMode(pin, OUTPUT);
        pinMode(PEDESTRIAN_BUTTON, INPUT_PULLUP); // Enable internal pull-up for button
    }

    void setSignalState(SignalState state) {
        // Turn off all lights
        for (int pin : TRAFFIC_LIGHT_PINS) digitalWrite(pin, LOW);
        for (int pin : TRAFFIC_LIGHT2_PINS) digitalWrite(pin, LOW);
        for (int pin : PEDESTRIAN_LIGHT_PINS) digitalWrite(pin, LOW);

        // Activate appropriate lights based on the state
        switch (state) {
            case SignalState::RED_SIGNAL:
                digitalWrite(TRAFFIC_LIGHT_PINS[0], HIGH); // Traffic 1 Red
                digitalWrite(TRAFFIC_LIGHT2_PINS[0], HIGH); // Traffic 2 Red
                digitalWrite(PEDESTRIAN_LIGHT_PINS[0], HIGH); // Pedestrian Red
                break;
            case SignalState::YELLOW_SIGNAL:
                digitalWrite(TRAFFIC_LIGHT_PINS[1], HIGH); // Traffic 1 Yellow
                digitalWrite(TRAFFIC_LIGHT2_PINS[1], HIGH); // Traffic 2 Yellow
                digitalWrite(PEDESTRIAN_LIGHT_PINS[0], HIGH); // Pedestrian Red
                break;
            case SignalState::GREEN_SIGNAL:
                digitalWrite(TRAFFIC_LIGHT_PINS[2], HIGH); // Traffic 1 Green
                digitalWrite(TRAFFIC_LIGHT2_PINS[0], HIGH); // Traffic 2 Red
                digitalWrite(PEDESTRIAN_LIGHT_PINS[0], HIGH); // Pedestrian Red
                break;
            case SignalState::PEDESTRIAN_SIGNAL:
                digitalWrite(TRAFFIC_LIGHT_PINS[0], HIGH); // Traffic 1 Red
                digitalWrite(TRAFFIC_LIGHT2_PINS[0], HIGH); // Traffic 2 Red
                digitalWrite(PEDESTRIAN_LIGHT_PINS[1], HIGH); // Pedestrian Green
                break;
        }
    }
};

// State machine and timing logic
class TrafficLightSystem {
private:
    SignalState currentState = SignalState::RED_SIGNAL;  // Initial state
    unsigned long lastStateChangeTime = 0;              // Time of last state change
    PedestrianRequestHandler pedestrianRequestHandler;
    TrafficLightController lightController;

public:
    void setup() {
        lightController.initializePins();
        lightController.setSignalState(SignalState::RED_SIGNAL);
        lastStateChangeTime = millis();
    }

    void update() {
        unsigned long currentTime = millis();

        pedestrianRequestHandler.checkButtonPress();

        switch (currentState) {
            case SignalState::RED_SIGNAL:
                if (pedestrianRequestHandler.isRequested()) {
                    changeState(SignalState::PEDESTRIAN_SIGNAL);
                } else if (currentTime - lastStateChangeTime >= RED_LIGHT_TIME) {
                    changeState(SignalState::GREEN_SIGNAL);
                }
                break;

            case SignalState::GREEN_SIGNAL:
                if (pedestrianRequestHandler.isRequested()) {
                    changeState(SignalState::YELLOW_SIGNAL);
                } else if (currentTime - lastStateChangeTime >= GREEN_LIGHT_TIME) {
                    changeState(SignalState::YELLOW_SIGNAL);
                }
                break;

            case SignalState::YELLOW_SIGNAL:
                if (currentTime - lastStateChangeTime >= YELLOW_LIGHT_TIME) {
                    if (pedestrianRequestHandler.isRequested()) {
                        changeState(SignalState::PEDESTRIAN_SIGNAL);
                    } else {
                        changeState(SignalState::RED_SIGNAL);
                    }
                }
                break;

            case SignalState::PEDESTRIAN_SIGNAL:
                if (currentTime - lastStateChangeTime >= RED_LIGHT_TIME) {
                    pedestrianRequestHandler.resetRequest();
                    changeState(SignalState::RED_SIGNAL);
                }
                break;
        }
    }

private:
    void changeState(SignalState newState) {
        currentState = newState;
        lightController.setSignalState(newState);
        lastStateChangeTime = millis();
    }
};

TrafficLightSystem trafficLightSystem;

void setup() {
    trafficLightSystem.setup();
}

void loop() {
    trafficLightSystem.update();
}
